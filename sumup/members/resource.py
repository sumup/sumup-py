# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .._exceptions import APIError
from .types import (
    Attributes,
    Member,
    MembershipStatus,
    Metadata,
)
import httpx
import typing
import pydantic


class CreateMerchantMemberBody(pydantic.BaseModel):
    """
    CreateMerchantMemberBody is a schema definition.
    """

    email: str
    """
	Email address of the member to add.
	Format: email
	"""

    roles: list[str]
    """
	List of roles to assign to the new member. In the case of service accounts, the roles are predefined.
	"""

    attributes: typing.Optional[Attributes] = None
    """
	Object attributes that are modifiable only by SumUp applications.
	"""

    is_managed_user: typing.Optional[bool] = None
    """
	True if the user is managed by the merchant. In this case, we'll created a virtual user with the provided passwordand nickname.
	"""

    metadata: typing.Optional[Metadata] = None
    """
	Set of user-defined key-value pairs attached to the object. Partial updates are not supported. When updating, alwayssubmit whole metadata.
	"""

    nickname: typing.Optional[str] = None
    """
	Nickname of the member to add. Only used if `is_managed_user` is true. Used for display purposes only.
	"""

    password: typing.Optional[str] = None
    """
	Password of the member to add. Only used if `is_managed_user` is true. In the case of service accounts, thepassword is not used and can not be defined by the caller.
	Format: password
	Min length: 8
	"""


class UpdateMerchantMemberBodyUser(pydantic.BaseModel):
    """
    Allows you to update user data of managed users.
    """

    nickname: typing.Optional[str] = None
    """
	User's preferred name. Used for display purposes only.
	"""

    password: typing.Optional[str] = None
    """
	Password of the member to add. Only used if `is_managed_user` is true.
	Format: password
	Min length: 8
	"""


class UpdateMerchantMemberBody(pydantic.BaseModel):
    """
    UpdateMerchantMemberBody is a schema definition.
    """

    attributes: typing.Optional[Attributes] = None
    """
	Object attributes that are modifiable only by SumUp applications.
	"""

    metadata: typing.Optional[Metadata] = None
    """
	Set of user-defined key-value pairs attached to the object. Partial updates are not supported. When updating, alwayssubmit whole metadata.
	"""

    roles: typing.Optional[list[str]] = None

    user: typing.Optional[UpdateMerchantMemberBodyUser] = None
    """
	Allows you to update user data of managed users.
	"""


class ListMerchantMembersParams(pydantic.BaseModel):
    """
    ListMerchantMembersParams: query parameters for ListMerchantMembers
    """

    email: typing.Optional[str] = None

    limit: typing.Optional[int] = None

    offset: typing.Optional[int] = None

    roles: typing.Optional[list[str]] = None

    scroll: typing.Optional[bool] = None

    status: typing.Optional[MembershipStatus] = None
    """
	The status of the membership.
	"""


class ListMerchantMembers200Response(pydantic.BaseModel):
    """
    ListMerchantMembers200Response is a schema definition.
    """

    items: list[Member]

    total_count: typing.Optional[int] = None


class MembersResource(Resource):
    def __init__(self, client: httpx.Client):
        super().__init__(client)

    def list(
        self,
        merchant_code: str,
        params: typing.Optional[ListMerchantMembersParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListMerchantMembers200Response:
        """
        List members

        Lists merchant members.
        """
        resp = self._client.get(
            f"/v0.1/merchants/{merchant_code}/members",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListMerchantMembers200Response).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def create(
        self,
        merchant_code: str,
        body: CreateMerchantMemberBody,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Member:
        """
        Create a member

        Create a merchant member.
        """
        resp = self._client.post(
            f"/v0.1/merchants/{merchant_code}/members",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 201:
            return pydantic.TypeAdapter(Member).validate_python(resp.json())
        elif resp.status_code == 400:
            raise APIError("Invalid request.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 429:
            raise APIError(
                "Too many invitations sent to that user. The limit is 10 requests per 5 minutes and the Retry-After header is set to the number of minutes until the reset of the limit.",
                status=resp.status_code,
                body=resp.text,
            )
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def get(
        self, merchant_code: str, member_id: str, headers: typing.Optional[HeaderTypes] = None
    ) -> Member:
        """
        Retrieve a member

        Retrieve a merchant member.
        """
        resp = self._client.get(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Member).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError("Merchant or member not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def update(
        self,
        merchant_code: str,
        member_id: str,
        body: UpdateMerchantMemberBody,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Member:
        """
        Update a member

        Update the merchant member.
        """
        resp = self._client.put(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Member).validate_python(resp.json())
        elif resp.status_code == 400:
            raise APIError(
                "Cannot set password or nickname for an invited user.",
                status=resp.status_code,
                body=resp.text,
            )
        elif resp.status_code == 403:
            raise APIError(
                "Cannot change password for managed user. Password was already used before.",
                status=resp.status_code,
                body=resp.text,
            )
        elif resp.status_code == 404:
            raise APIError("Merchant or member not found.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 409:
            raise APIError(
                "Cannot update member as some data conflict with existing members.",
                status=resp.status_code,
                body=resp.text,
            )
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def delete(
        self, merchant_code: str, member_id: str, headers: typing.Optional[HeaderTypes] = None
    ):
        """
        Delete a member

        Deletes a merchant member.
        """
        resp = self._client.delete(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
            headers=headers,
        )
        if resp.status_code == 200:
            return
        elif resp.status_code == 404:
            raise APIError("Merchant or member not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)


class AsyncMembersResource(AsyncResource):
    def __init__(self, client: httpx.AsyncClient):
        super().__init__(client)

    async def list(
        self,
        merchant_code: str,
        params: typing.Optional[ListMerchantMembersParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListMerchantMembers200Response:
        """
        List members

        Lists merchant members.
        """
        resp = await self._client.get(
            f"/v0.1/merchants/{merchant_code}/members",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListMerchantMembers200Response).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def create(
        self,
        merchant_code: str,
        body: CreateMerchantMemberBody,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Member:
        """
        Create a member

        Create a merchant member.
        """
        resp = await self._client.post(
            f"/v0.1/merchants/{merchant_code}/members",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 201:
            return pydantic.TypeAdapter(Member).validate_python(resp.json())
        elif resp.status_code == 400:
            raise APIError("Invalid request.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 429:
            raise APIError(
                "Too many invitations sent to that user. The limit is 10 requests per 5 minutes and the Retry-After header is set to the number of minutes until the reset of the limit.",
                status=resp.status_code,
                body=resp.text,
            )
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def get(
        self, merchant_code: str, member_id: str, headers: typing.Optional[HeaderTypes] = None
    ) -> Member:
        """
        Retrieve a member

        Retrieve a merchant member.
        """
        resp = await self._client.get(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Member).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError("Merchant or member not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def update(
        self,
        merchant_code: str,
        member_id: str,
        body: UpdateMerchantMemberBody,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Member:
        """
        Update a member

        Update the merchant member.
        """
        resp = await self._client.put(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Member).validate_python(resp.json())
        elif resp.status_code == 400:
            raise APIError(
                "Cannot set password or nickname for an invited user.",
                status=resp.status_code,
                body=resp.text,
            )
        elif resp.status_code == 403:
            raise APIError(
                "Cannot change password for managed user. Password was already used before.",
                status=resp.status_code,
                body=resp.text,
            )
        elif resp.status_code == 404:
            raise APIError("Merchant or member not found.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 409:
            raise APIError(
                "Cannot update member as some data conflict with existing members.",
                status=resp.status_code,
                body=resp.text,
            )
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def delete(
        self, merchant_code: str, member_id: str, headers: typing.Optional[HeaderTypes] = None
    ):
        """
        Delete a member

        Deletes a merchant member.
        """
        resp = await self._client.delete(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
            headers=headers,
        )
        if resp.status_code == 200:
            return
        elif resp.status_code == 404:
            raise APIError("Merchant or member not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)
