# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .._exceptions import APIError
from .types import Metadata, Role
import httpx
import typing
import pydantic


class CreateMerchantRoleBody(pydantic.BaseModel):
    """
    CreateMerchantRoleBody is a schema definition.
    """

    name: str
    """
	User-defined name of the role.
	"""

    permissions: list[str]
    """
	User's permissions.
	Max items: 100
	"""

    description: typing.Optional[str] = None
    """
	User-defined description of the role.
	"""

    metadata: typing.Optional[Metadata] = None
    """
	Set of user-defined key-value pairs attached to the object. Partial updates are not supported. When updating, alwayssubmit whole metadata.
	"""


class UpdateMerchantRoleBody(pydantic.BaseModel):
    """
    UpdateMerchantRoleBody is a schema definition.
    """

    description: typing.Optional[str] = None
    """
	User-defined description of the role.
	"""

    name: typing.Optional[str] = None
    """
	User-defined name of the role.
	"""

    permissions: typing.Optional[list[str]] = None
    """
	User's permissions.
	Max items: 100
	"""


class ListMerchantRoles200Response(pydantic.BaseModel):
    """
    ListMerchantRoles200Response is a schema definition.
    """

    items: list[Role]


class RolesResource(Resource):
    def __init__(self, client: httpx.Client):
        super().__init__(client)

    def list(
        self, merchant_code: str, headers: typing.Optional[HeaderTypes] = None
    ) -> ListMerchantRoles200Response:
        """
        List roles

        List merchant's custom roles.
        """
        resp = self._client.get(
            f"/v0.1/merchants/{merchant_code}/roles",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListMerchantRoles200Response).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def create(
        self,
        merchant_code: str,
        body: CreateMerchantRoleBody,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Role:
        """
        Create a role

        Create a custom role for the merchant. Roles are defined by the set of permissions that they grant to the members thatthey are assigned to.
        """
        resp = self._client.post(
            f"/v0.1/merchants/{merchant_code}/roles",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 201:
            return pydantic.TypeAdapter(Role).validate_python(resp.json())
        elif resp.status_code == 400:
            raise APIError("Invalid request.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def get(
        self, merchant_code: str, role_id: str, headers: typing.Optional[HeaderTypes] = None
    ) -> Role:
        """
        Retrieve a role

        Retrieve a custom role by ID.
        """
        resp = self._client.get(
            f"/v0.1/merchants/{merchant_code}/roles/{role_id}",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Role).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError("Merchant or role not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def delete(
        self, merchant_code: str, role_id: str, headers: typing.Optional[HeaderTypes] = None
    ):
        """
        Delete a role

        Delete a custom role.
        """
        resp = self._client.delete(
            f"/v0.1/merchants/{merchant_code}/roles/{role_id}",
            headers=headers,
        )
        if resp.status_code == 200:
            return
        elif resp.status_code == 400:
            raise APIError("Invalid request.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def update(
        self,
        merchant_code: str,
        role_id: str,
        body: UpdateMerchantRoleBody,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Role:
        """
        Update a role

        Update a custom role.
        """
        resp = self._client.patch(
            f"/v0.1/merchants/{merchant_code}/roles/{role_id}",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Role).validate_python(resp.json())
        elif resp.status_code == 400:
            raise APIError("Invalid request.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)


class AsyncRolesResource(AsyncResource):
    def __init__(self, client: httpx.AsyncClient):
        super().__init__(client)

    async def list(
        self, merchant_code: str, headers: typing.Optional[HeaderTypes] = None
    ) -> ListMerchantRoles200Response:
        """
        List roles

        List merchant's custom roles.
        """
        resp = await self._client.get(
            f"/v0.1/merchants/{merchant_code}/roles",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListMerchantRoles200Response).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def create(
        self,
        merchant_code: str,
        body: CreateMerchantRoleBody,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Role:
        """
        Create a role

        Create a custom role for the merchant. Roles are defined by the set of permissions that they grant to the members thatthey are assigned to.
        """
        resp = await self._client.post(
            f"/v0.1/merchants/{merchant_code}/roles",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 201:
            return pydantic.TypeAdapter(Role).validate_python(resp.json())
        elif resp.status_code == 400:
            raise APIError("Invalid request.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def get(
        self, merchant_code: str, role_id: str, headers: typing.Optional[HeaderTypes] = None
    ) -> Role:
        """
        Retrieve a role

        Retrieve a custom role by ID.
        """
        resp = await self._client.get(
            f"/v0.1/merchants/{merchant_code}/roles/{role_id}",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Role).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError("Merchant or role not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def delete(
        self, merchant_code: str, role_id: str, headers: typing.Optional[HeaderTypes] = None
    ):
        """
        Delete a role

        Delete a custom role.
        """
        resp = await self._client.delete(
            f"/v0.1/merchants/{merchant_code}/roles/{role_id}",
            headers=headers,
        )
        if resp.status_code == 200:
            return
        elif resp.status_code == 400:
            raise APIError("Invalid request.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def update(
        self,
        merchant_code: str,
        role_id: str,
        body: UpdateMerchantRoleBody,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Role:
        """
        Update a role

        Update a custom role.
        """
        resp = await self._client.patch(
            f"/v0.1/merchants/{merchant_code}/roles/{role_id}",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Role).validate_python(resp.json())
        elif resp.status_code == 400:
            raise APIError("Invalid request.", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Merchant not found.", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)
