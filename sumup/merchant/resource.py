# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .types import (
    BankAccount,
    DoingBusinessAs,
    MerchantAccount,
    MerchantProfile,
    MerchantSettings,
    PersonalProfile,
)
import typing
import pydantic


class GetAccountParams(pydantic.BaseModel):
    """
    GetAccountParams: query parameters for GetAccount
    """

    include: typing.Optional[list[str]] = None


class ListBankAccountsV11Params(pydantic.BaseModel):
    """
    ListBankAccountsV11Params: query parameters for ListBankAccountsV11
    """

    primary: typing.Optional[bool] = None


class ListBankAccountsParams(pydantic.BaseModel):
    """
    ListBankAccountsParams: query parameters for ListBankAccounts
    """

    primary: typing.Optional[bool] = None


ListBankAccountsV11200Response = list[BankAccount]
"""
ListBankAccountsV11200Response is a schema definition.
"""

ListBankAccounts200Response = list[BankAccount]
"""
ListBankAccounts200Response is a schema definition.
"""


class MerchantResource(Resource):
    def __init__(self, client):
        super().__init__(client)

    def get(
        self,
        params: typing.Optional[GetAccountParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> MerchantAccount:
        """
        Retrieve a profile

        Returns user profile information.
        """
        resp = self._client.get(
            "/v0.1/me",
            params=params.dict() if params else None,
            headers=headers,
        )
        return pydantic.TypeAdapter(MerchantAccount).validate_python(resp.json())

    def get_personal_profile(self, headers: typing.Optional[HeaderTypes] = None) -> PersonalProfile:
        """
        Retrieve a personal profile

        Retrieves personal profile data.
        """
        resp = self._client.get(
            "/v0.1/me/personal-profile",
            headers=headers,
        )
        return pydantic.TypeAdapter(PersonalProfile).validate_python(resp.json())

    def get_merchant_profile(self, headers: typing.Optional[HeaderTypes] = None) -> MerchantProfile:
        """
        Retrieve a merchant profile

        Retrieves merchant profile data.
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile",
            headers=headers,
        )
        return pydantic.TypeAdapter(MerchantProfile).validate_python(resp.json())

    def get_doing_business_as(
        self, headers: typing.Optional[HeaderTypes] = None
    ) -> DoingBusinessAs:
        """
        Retrieve DBA

        Retrieves Doing Business As profile.
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile/doing-business-as",
            headers=headers,
        )
        return pydantic.TypeAdapter(DoingBusinessAs).validate_python(resp.json())

    def list_bank_accounts(
        self,
        merchant_code: str,
        params: typing.Optional[ListBankAccountsV11Params] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListBankAccountsV11200Response:
        """
        List bank accounts

        Retrieves bank accounts of the merchant.
        """
        resp = self._client.get(
            f"/v1.1/merchants/{merchant_code}/bank-accounts",
            params=params.dict() if params else None,
            headers=headers,
        )
        return pydantic.TypeAdapter(ListBankAccountsV11200Response).validate_python(resp.json())

    def list_bank_accounts_deprecated(
        self,
        params: typing.Optional[ListBankAccountsParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListBankAccounts200Response:
        """
        List bank accounts

        Retrieves bank accounts of the merchant.

        Deprecated: this operation is deprecated
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile/bank-accounts",
            params=params.dict() if params else None,
            headers=headers,
        )
        return pydantic.TypeAdapter(ListBankAccounts200Response).validate_python(resp.json())

    def get_settings(self, headers: typing.Optional[HeaderTypes] = None) -> MerchantSettings:
        """
        Get settings

        Retrieves merchant settings.
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile/settings",
            headers=headers,
        )
        return pydantic.TypeAdapter(MerchantSettings).validate_python(resp.json())


class AsyncMerchantResource(AsyncResource):
    def __init__(self, client):
        super().__init__(client)

    async def get(
        self,
        params: typing.Optional[GetAccountParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> MerchantAccount:
        """
        Retrieve a profile

        Returns user profile information.
        """
        resp = await self._client.get(
            "/v0.1/me",
            params=params.dict() if params else None,
            headers=headers,
        )
        return pydantic.TypeAdapter(MerchantAccount).validate_python(resp.json())

    async def get_personal_profile(
        self, headers: typing.Optional[HeaderTypes] = None
    ) -> PersonalProfile:
        """
        Retrieve a personal profile

        Retrieves personal profile data.
        """
        resp = await self._client.get(
            "/v0.1/me/personal-profile",
            headers=headers,
        )
        return pydantic.TypeAdapter(PersonalProfile).validate_python(resp.json())

    async def get_merchant_profile(
        self, headers: typing.Optional[HeaderTypes] = None
    ) -> MerchantProfile:
        """
        Retrieve a merchant profile

        Retrieves merchant profile data.
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile",
            headers=headers,
        )
        return pydantic.TypeAdapter(MerchantProfile).validate_python(resp.json())

    async def get_doing_business_as(
        self, headers: typing.Optional[HeaderTypes] = None
    ) -> DoingBusinessAs:
        """
        Retrieve DBA

        Retrieves Doing Business As profile.
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile/doing-business-as",
            headers=headers,
        )
        return pydantic.TypeAdapter(DoingBusinessAs).validate_python(resp.json())

    async def list_bank_accounts(
        self,
        merchant_code: str,
        params: typing.Optional[ListBankAccountsV11Params] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListBankAccountsV11200Response:
        """
        List bank accounts

        Retrieves bank accounts of the merchant.
        """
        resp = await self._client.get(
            f"/v1.1/merchants/{merchant_code}/bank-accounts",
            params=params.dict() if params else None,
            headers=headers,
        )
        return pydantic.TypeAdapter(ListBankAccountsV11200Response).validate_python(resp.json())

    async def list_bank_accounts_deprecated(
        self,
        params: typing.Optional[ListBankAccountsParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListBankAccounts200Response:
        """
        List bank accounts

        Retrieves bank accounts of the merchant.

        Deprecated: this operation is deprecated
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile/bank-accounts",
            params=params.dict() if params else None,
            headers=headers,
        )
        return pydantic.TypeAdapter(ListBankAccounts200Response).validate_python(resp.json())

    async def get_settings(self, headers: typing.Optional[HeaderTypes] = None) -> MerchantSettings:
        """
        Get settings

        Retrieves merchant settings.
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile/settings",
            headers=headers,
        )
        return pydantic.TypeAdapter(MerchantSettings).validate_python(resp.json())
