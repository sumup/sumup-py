# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .._exceptions import APIError
from .types import (
    BankAccount,
    DoingBusinessAsLegacy,
    MerchantAccount,
    MerchantProfileLegacy,
    MerchantSettings,
    PersonalProfileLegacy,
)
import httpx
import typing
import pydantic
import typing_extensions


class GetAccountParams(pydantic.BaseModel):
    """
    GetAccountParams: query parameters for GetAccount
    """

    include: typing.Optional[list[str]] = None


class ListBankAccountsV11Params(pydantic.BaseModel):
    """
    ListBankAccountsV11Params: query parameters for ListBankAccountsV11
    """

    primary: typing.Optional[bool] = None


class ListBankAccountsParams(pydantic.BaseModel):
    """
    ListBankAccountsParams: query parameters for ListBankAccounts
    """

    primary: typing.Optional[bool] = None


ListBankAccountsV11200Response = list[BankAccount]
"""
ListBankAccountsV11200Response is a schema definition.
"""

ListBankAccounts200Response = list[BankAccount]
"""
ListBankAccounts200Response is a schema definition.
"""


class MerchantResource(Resource):
    def __init__(self, client: httpx.Client):
        super().__init__(client)

    @typing_extensions.deprecated(
        "The _Retrieve a profile_ endpoint is deprecated, please use the `Merchant` object instead (see [Merchants](https://developer.sumup.com/api/merchants))."
    )
    def get(
        self,
        params: typing.Optional[GetAccountParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> MerchantAccount:
        """
        Retrieve a profile

        Returns user profile information.
        """
        resp = self._client.get(
            "/v0.1/me",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(MerchantAccount).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    @typing_extensions.deprecated(
        "The _Retrieve a personal profile_ endpoint is deprecated, please use the `persons` field of the `Merchant` object instead. (see [Merchants](https://developer.sumup.com/api/merchants))."
    )
    def get_personal_profile(
        self, headers: typing.Optional[HeaderTypes] = None
    ) -> PersonalProfileLegacy:
        """
        Retrieve a personal profile

        Retrieves personal profile data.
        """
        resp = self._client.get(
            "/v0.1/me/personal-profile",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(PersonalProfileLegacy).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    @typing_extensions.deprecated(
        "The _Retrieve a merchant profile_ endpoint is deprecated, please use the `Merchant` object instead (see [Merchants](https://developer.sumup.com/api/merchants))."
    )
    def get_merchant_profile(
        self, headers: typing.Optional[HeaderTypes] = None
    ) -> MerchantProfileLegacy:
        """
        Retrieve a merchant profile

        Retrieves merchant profile data.
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(MerchantProfileLegacy).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    @typing_extensions.deprecated(
        "The _Retrieve DBA_ endpoint is deprecated, please use the `business_profile` field of the `Merchant` object instead (see [Merchants](https://developer.sumup.com/api/merchants))."
    )
    def get_doing_business_as(
        self, headers: typing.Optional[HeaderTypes] = None
    ) -> DoingBusinessAsLegacy:
        """
        Retrieve DBA

        Retrieves Doing Business As profile.
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile/doing-business-as",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(DoingBusinessAsLegacy).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def list_bank_accounts(
        self,
        merchant_code: str,
        params: typing.Optional[ListBankAccountsV11Params] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListBankAccountsV11200Response:
        """
        List bank accounts

        Retrieves bank accounts of the merchant.
        """
        resp = self._client.get(
            f"/v1.1/merchants/{merchant_code}/bank-accounts",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListBankAccountsV11200Response).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    @typing_extensions.deprecated("This method is deprecated")
    def list_bank_accounts_deprecated(
        self,
        params: typing.Optional[ListBankAccountsParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListBankAccounts200Response:
        """
        List bank accounts

        Retrieves bank accounts of the merchant.
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile/bank-accounts",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListBankAccounts200Response).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def get_settings(self, headers: typing.Optional[HeaderTypes] = None) -> MerchantSettings:
        """
        Get settings

        Retrieves merchant settings.
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile/settings",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(MerchantSettings).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)


class AsyncMerchantResource(AsyncResource):
    def __init__(self, client: httpx.AsyncClient):
        super().__init__(client)

    @typing_extensions.deprecated(
        "The _Retrieve a profile_ endpoint is deprecated, please use the `Merchant` object instead (see [Merchants](https://developer.sumup.com/api/merchants))."
    )
    async def get(
        self,
        params: typing.Optional[GetAccountParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> MerchantAccount:
        """
        Retrieve a profile

        Returns user profile information.
        """
        resp = await self._client.get(
            "/v0.1/me",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(MerchantAccount).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    @typing_extensions.deprecated(
        "The _Retrieve a personal profile_ endpoint is deprecated, please use the `persons` field of the `Merchant` object instead. (see [Merchants](https://developer.sumup.com/api/merchants))."
    )
    async def get_personal_profile(
        self, headers: typing.Optional[HeaderTypes] = None
    ) -> PersonalProfileLegacy:
        """
        Retrieve a personal profile

        Retrieves personal profile data.
        """
        resp = await self._client.get(
            "/v0.1/me/personal-profile",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(PersonalProfileLegacy).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    @typing_extensions.deprecated(
        "The _Retrieve a merchant profile_ endpoint is deprecated, please use the `Merchant` object instead (see [Merchants](https://developer.sumup.com/api/merchants))."
    )
    async def get_merchant_profile(
        self, headers: typing.Optional[HeaderTypes] = None
    ) -> MerchantProfileLegacy:
        """
        Retrieve a merchant profile

        Retrieves merchant profile data.
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(MerchantProfileLegacy).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    @typing_extensions.deprecated(
        "The _Retrieve DBA_ endpoint is deprecated, please use the `business_profile` field of the `Merchant` object instead (see [Merchants](https://developer.sumup.com/api/merchants))."
    )
    async def get_doing_business_as(
        self, headers: typing.Optional[HeaderTypes] = None
    ) -> DoingBusinessAsLegacy:
        """
        Retrieve DBA

        Retrieves Doing Business As profile.
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile/doing-business-as",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(DoingBusinessAsLegacy).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def list_bank_accounts(
        self,
        merchant_code: str,
        params: typing.Optional[ListBankAccountsV11Params] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListBankAccountsV11200Response:
        """
        List bank accounts

        Retrieves bank accounts of the merchant.
        """
        resp = await self._client.get(
            f"/v1.1/merchants/{merchant_code}/bank-accounts",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListBankAccountsV11200Response).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    @typing_extensions.deprecated("This method is deprecated")
    async def list_bank_accounts_deprecated(
        self,
        params: typing.Optional[ListBankAccountsParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListBankAccounts200Response:
        """
        List bank accounts

        Retrieves bank accounts of the merchant.
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile/bank-accounts",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListBankAccounts200Response).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def get_settings(self, headers: typing.Optional[HeaderTypes] = None) -> MerchantSettings:
        """
        Get settings

        Retrieves merchant settings.
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile/settings",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(MerchantSettings).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)
