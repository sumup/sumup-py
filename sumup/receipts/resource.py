# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .._exceptions import APIError
from .types import (
    Receipt,
)
import httpx
import typing
import pydantic


class GetReceiptParams(pydantic.BaseModel):
    """
    GetReceiptParams: query parameters for GetReceipt
    """

    mid: str

    tx_event_id: typing.Optional[int] = None


class ReceiptsResource(Resource):
    def __init__(self, client: httpx.Client):
        super().__init__(client)

    def get(
        self,
        id: str,
        params: typing.Optional[GetReceiptParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Receipt:
        """
        Retrieve receipt details

        Retrieves receipt specific data for a transaction.
        """
        resp = self._client.get(
            f"/v1.1/receipts/{id}",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Receipt).validate_python(resp.json())
        elif resp.status_code == 400:
            raise APIError("Not Found", status=resp.status_code, body=resp.text)
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)


class AsyncReceiptsResource(AsyncResource):
    def __init__(self, client: httpx.AsyncClient):
        super().__init__(client)

    async def get(
        self,
        id: str,
        params: typing.Optional[GetReceiptParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Receipt:
        """
        Retrieve receipt details

        Retrieves receipt specific data for a transaction.
        """
        resp = await self._client.get(
            f"/v1.1/receipts/{id}",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Receipt).validate_python(resp.json())
        elif resp.status_code == 400:
            raise APIError("Not Found", status=resp.status_code, body=resp.text)
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)
