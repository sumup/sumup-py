# Code generated by `py-sdk-gen`. DO NOT EDIT.
from datetime import datetime
import typing
import pydantic


class ReceiptCard(pydantic.BaseModel):
    """
    ReceiptCard is a schema definition.
    """

    last_4_digits: typing.Optional[str] = None
    """
	Card last 4 digits.
	"""

    type: typing.Optional[str] = None
    """
	Card Scheme.
	"""


type EventId = int
"""
Unique ID of the transaction event.
Format: int64
"""

type TransactionId = str
"""
Unique ID of the transaction.
"""

type EventType = typing.Literal["CHARGE_BACK", "PAYOUT", "PAYOUT_DEDUCTION", "REFUND"]

type EventStatus = typing.Literal[
    "FAILED", "PAID_OUT", "PENDING", "REFUNDED", "SCHEDULED", "SUCCESSFUL"
]

type AmountEvent = float
"""
Amount of the event.
"""

type TimestampEvent = str
"""
Date and time of the transaction event.
"""


class ReceiptEvent(pydantic.BaseModel):
    """
    ReceiptEvent is a schema definition.
    """

    amount: typing.Optional[AmountEvent] = None
    """
	Amount of the event.
	"""

    id: typing.Optional[EventId] = None
    """
	Unique ID of the transaction event.
	Format: int64
	"""

    receipt_no: typing.Optional[str] = None

    status: typing.Optional[EventStatus] = None
    """
	Status of the transaction event.
	"""

    timestamp: typing.Optional[TimestampEvent] = None
    """
	Date and time of the transaction event.
	"""

    transaction_id: typing.Optional[TransactionId] = None
    """
	Unique ID of the transaction.
	"""

    type: typing.Optional[EventType] = None
    """
	Type of the transaction event.
	"""


class ReceiptTransactionProduct(pydantic.BaseModel):
    """
    ReceiptTransactionProduct is a schema definition.
    """

    description: typing.Optional[str] = None
    """
	Product description.
	"""

    name: typing.Optional[str] = None
    """
	Product name.
	"""

    price: typing.Optional[float] = None
    """
	Product price.
	"""

    quantity: typing.Optional[int] = None
    """
	Product quantity.
	"""

    total_price: typing.Optional[float] = None
    """
	Quantity x product price.
	"""


class ReceiptTransactionVatRate(pydantic.BaseModel):
    """
    ReceiptTransactionVatRate is a schema definition.
    """

    gross: typing.Optional[float] = None
    """
	Gross
	"""

    net: typing.Optional[float] = None
    """
	Net
	"""

    rate: typing.Optional[float] = None
    """
	Rate
	"""

    vat: typing.Optional[float] = None
    """
	Vat
	"""


class ReceiptTransaction(pydantic.BaseModel):
    """
    Transaction information.
    """

    amount: typing.Optional[str] = None
    """
	Transaction amount.
	"""

    card: typing.Optional[ReceiptCard] = None

    currency: typing.Optional[str] = None
    """
	Transaction currency.
	"""

    entry_mode: typing.Optional[str] = None
    """
	Transaction entry mode.
	"""

    events: typing.Optional[list[ReceiptEvent]] = None
    """
	Events
	"""

    installments_count: typing.Optional[int] = None
    """
	Number of installments.
	"""

    payment_type: typing.Optional[str] = None
    """
	Transaction type.
	"""

    products: typing.Optional[list[ReceiptTransactionProduct]] = None
    """
	Products
	"""

    receipt_no: typing.Optional[str] = None
    """
	Receipt number
	"""

    status: typing.Optional[str] = None
    """
	Transaction processing status.
	"""

    timestamp: typing.Optional[datetime] = None
    """
	Time created at.
	"""

    tip_amount: typing.Optional[str] = None
    """
	Tip amount (included in transaction amount).
	"""

    transaction_code: typing.Optional[str] = None
    """
	Transaction code.
	"""

    vat_amount: typing.Optional[str] = None
    """
	Transaction VAT amount.
	"""

    vat_rates: typing.Optional[list[ReceiptTransactionVatRate]] = None
    """
	Vat rates.
	"""

    verification_method: typing.Optional[str] = None
    """
	Cardholder verification method.
	"""


class ReceiptMerchantDataMerchantProfileAddress(pydantic.BaseModel):
    """
    ReceiptMerchantDataMerchantProfileAddress is a schema definition.
    """

    address_line1: typing.Optional[str] = None

    city: typing.Optional[str] = None

    country: typing.Optional[str] = None

    country_en_name: typing.Optional[str] = None

    country_native_name: typing.Optional[str] = None

    landline: typing.Optional[str] = None

    post_code: typing.Optional[str] = None


class ReceiptMerchantDataMerchantProfile(pydantic.BaseModel):
    """
    ReceiptMerchantDataMerchantProfile is a schema definition.
    """

    address: typing.Optional[ReceiptMerchantDataMerchantProfileAddress] = None

    business_name: typing.Optional[str] = None

    email: typing.Optional[str] = None

    merchant_code: typing.Optional[str] = None


class ReceiptMerchantData(pydantic.BaseModel):
    """
    Receipt merchant data
    """

    locale: typing.Optional[str] = None

    merchant_profile: typing.Optional[ReceiptMerchantDataMerchantProfile] = None


class ReceiptEmvData(pydantic.BaseModel):
    """
    ReceiptEmvData is a schema definition.
    """


class ReceiptAcquirerData(pydantic.BaseModel):
    """
    ReceiptAcquirerData is a schema definition.
    """

    authorization_code: typing.Optional[str] = None

    local_time: typing.Optional[str] = None

    return_code: typing.Optional[str] = None

    tid: typing.Optional[str] = None


class Receipt(pydantic.BaseModel):
    """
    Receipt is a schema definition.
    """

    acquirer_data: typing.Optional[ReceiptAcquirerData] = None

    emv_data: typing.Optional[ReceiptEmvData] = None

    merchant_data: typing.Optional[ReceiptMerchantData] = None
    """
	Receipt merchant data
	"""

    transaction_data: typing.Optional[ReceiptTransaction] = None
    """
	Transaction information.
	"""


class Error(pydantic.BaseModel):
    """
    Error message structure.
    """

    error_code: typing.Optional[str] = None
    """
	Platform code for the error.
	"""

    message: typing.Optional[str] = None
    """
	Short description of the error.
	"""
