# Code generated by `py-sdk-gen`. DO NOT EDIT.
from datetime import datetime
import typing
import pydantic


class CreateReaderCheckoutAmount(pydantic.BaseModel):
    """
            Amount of the transaction.
    The amount is represented as an integer value altogether with the currency and the minor unit.
    For example, EUR 1.00 is represented as value 100 with minor unit of 2.
    """

    currency: str
    """
	Currency ISO 4217 code
	"""

    minor_unit: int
    """
	The minor units of the currency. It represents the number of decimals of the currency.
	For the currencies CLP, COP and HUF, the minor unit is 0.
	"""

    value: int
    """
	Total amount of the transaction.
	It must be a positive integer.
	"""


AffiliateTags = dict[typing.Any, typing.Any]
"""
Additional metadata for the transaction.
It is key-value object that can be associated with the transaction.
"""


class Affiliate(pydantic.BaseModel):
    """
            Affiliate metadata for the transaction.
    It is an optional field that allow for integrators to track the source of the transaction.
    """

    app_id: str
    """
	Application ID of the affiliate.
	It is a unique identifier for the application and should be set by the integrator in the [Affiliate Keys](https://developer.sumup.com/affiliate-keys) page.
	"""

    foreign_transaction_id: str
    """
	Foreign transaction ID of the affiliate.
	It is a unique identifier for the transaction.
	It can be used later to fetch the transaction details via the [Transactions API](https://developer.sumup.com/api/transactions/get).
	"""

    key: str
    """
	Key of the affiliate.
	It is a unique identifier for the key  and should be generated by the integrator in the [Affiliate Keys](https://developer.sumup.com/affiliate-keys) page.
	Format:uuid
	"""

    tags: typing.Optional[AffiliateTags] = None
    """
	Additional metadata for the transaction.
	It is key-value object that can be associated with the transaction.
	"""


CreateReaderCheckoutCardType = typing.Literal["credit", "debit"]


class CreateReaderCheckout(pydantic.BaseModel):
    """
    Reader Checkout
    """

    total_amount: CreateReaderCheckoutAmount
    """
	Amount of the transaction.
	The amount is represented as an integer value altogether with the currency and the minor unit.
	For example, EUR 1.00 is represented as value 100 with minor unit of 2.
	"""

    affiliate: typing.Optional[Affiliate] = None
    """
	Affiliate metadata for the transaction.
	It is an optional field that allow for integrators to track the source of the transaction.
	"""

    card_type: typing.Optional[CreateReaderCheckoutCardType] = None
    """
	The card type of the card used for the transaction.
	Is is required only for some countries (e.g: Brazil).
	"""

    description: typing.Optional[str] = None
    """
	Description of the checkout to be shown in the Merchant Sales
	"""

    installments: typing.Optional[int] = None
    """
	Number of installments for the transaction.
	It may vary according to the merchant country.
	For example, in Brazil, the maximum number of installments is 12.
	"""

    return_url: typing.Optional[str] = None
    """
	Webhook URL to which the payment result will be sent.
	It must be a HTTPS url.
	Format: uri
	"""

    tip_rates: typing.Optional[list[float]] = None
    """
	List of tipping rates to be displayed to the cardholder.
	The rates are in percentage and should be between 0.01 and 0.99.
	The list should be sorted in ascending order.
	"""


ReaderId = str
"""
Unique identifier of the object.
Note that this identifies the instance of the physical devices pairing with your SumUp account.
If you DELETE a reader, and pair the device again, the ID will be different. Do not use this ID to refer toa physical device.
Min length: 30
Max length: 30
"""

ReaderName = str
"""
Custom human-readable, user-defined name for easier identification of the reader.
Max length: 500
"""

ReaderStatus = typing.Literal["expired", "paired", "processing", "unknown"]

ReaderDeviceModel = typing.Literal["solo", "virtual-solo"]


class ReaderDevice(pydantic.BaseModel):
    """
    Information about the underlying physical device.
    """

    identifier: str
    """
	A unique identifier of the physical device (e.g. serial number).
	"""

    model: ReaderDeviceModel
    """
	Identifier of the model of the device.
	"""


Meta = dict[typing.Any, typing.Any]
"""
Set of user-defined key-value pairs attached to the object.
Max properties: 50
"""


class Reader(pydantic.BaseModel):
    """
    A physical card reader device that can accept in-person payments.
    """

    created_at: datetime
    """
	The timestamp of when the reader was created.
	"""

    device: ReaderDevice
    """
	Information about the underlying physical device.
	"""

    id: ReaderId
    """
	Unique identifier of the object.
	Note that this identifies the instance of the physical devices pairing with your SumUp account.
	If you DELETE a reader, and pair the device again, the ID will be different. Do not use this ID to refer toa physical device.
	Min length: 30
	Max length: 30
	"""

    name: ReaderName
    """
	Custom human-readable, user-defined name for easier identification of the reader.
	Max length: 500
	"""

    status: ReaderStatus
    """
	The status of the reader object gives information about the current state of the reader.
	
	Possible values:
	
	- `unknown` - The reader status is unknown.
	- `processing` - The reader is created and waits for the physical device to confirm the pairing.
	- `paired` - The reader is paired with a merchant account and can be used with SumUp APIs.
	- `expired` - The pairing is expired and no longer usable with the account. The resource needs to get recreated
	"""

    updated_at: datetime
    """
	The timestamp of when the reader was last updated.
	"""

    meta: typing.Optional[Meta] = None
    """
	Set of user-defined key-value pairs attached to the object.
	Max properties: 50
	"""


ReaderPairingCode = str
"""
The pairing code is a 8 or 9 character alphanumeric string that is displayed on a SumUp Device after initiatingthe pairing. It is used to link the physical device to the created pairing.
Min length: 8
Max length: 9
"""
