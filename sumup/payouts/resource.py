# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .._exceptions import APIError
from .types import FinancialPayouts
import datetime
import httpx
import typing
import pydantic
import typing_extensions


class ListPayoutsV1Params(pydantic.BaseModel):
    """
    ListPayoutsV1Params: query parameters for ListPayoutsV1
    """

    end_date: datetime.date

    start_date: datetime.date

    format: typing.Optional[str] = None

    limit: typing.Optional[int] = None

    order: typing.Optional[str] = None


class ListPayoutsParams(pydantic.BaseModel):
    """
    ListPayoutsParams: query parameters for ListPayouts
    """

    end_date: datetime.date

    start_date: datetime.date

    format: typing.Optional[str] = None

    limit: typing.Optional[int] = None

    order: typing.Optional[str] = None


class PayoutsResource(Resource):
    def __init__(self, client: httpx.Client):
        super().__init__(client)

    def list(
        self,
        merchant_code: str,
        params: typing.Optional[ListPayoutsV1Params] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> FinancialPayouts:
        """
        List payouts

        Lists ordered payouts for the merchant profile.
        """
        resp = self._client.get(
            f"/v1.0/merchants/{merchant_code}/payouts",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(FinancialPayouts).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    @typing_extensions.deprecated("This method is deprecated")
    def list_deprecated(
        self,
        params: typing.Optional[ListPayoutsParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> FinancialPayouts:
        """
        List payouts

        Lists ordered payouts for the merchant profile.
        """
        resp = self._client.get(
            "/v0.1/me/financials/payouts",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(FinancialPayouts).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)


class AsyncPayoutsResource(AsyncResource):
    def __init__(self, client: httpx.AsyncClient):
        super().__init__(client)

    async def list(
        self,
        merchant_code: str,
        params: typing.Optional[ListPayoutsV1Params] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> FinancialPayouts:
        """
        List payouts

        Lists ordered payouts for the merchant profile.
        """
        resp = await self._client.get(
            f"/v1.0/merchants/{merchant_code}/payouts",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(FinancialPayouts).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    @typing_extensions.deprecated("This method is deprecated")
    async def list_deprecated(
        self,
        params: typing.Optional[ListPayoutsParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> FinancialPayouts:
        """
        List payouts

        Lists ordered payouts for the merchant profile.
        """
        resp = await self._client.get(
            "/v0.1/me/financials/payouts",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(FinancialPayouts).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)
