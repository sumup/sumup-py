# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .._exceptions import APIError
from .types import (
    ListPersonsResponseBody,
    Merchant,
    Person,
)
import httpx
import typing
import pydantic


class GetMerchantParams(pydantic.BaseModel):
    """
    GetMerchantParams: query parameters for GetMerchant
    """

    version: typing.Optional[str] = None


class ListPersonsParams(pydantic.BaseModel):
    """
    ListPersonsParams: query parameters for ListPersons
    """

    version: typing.Optional[str] = None


class GetPersonParams(pydantic.BaseModel):
    """
    GetPersonParams: query parameters for GetPerson
    """

    version: typing.Optional[str] = None


class MerchantsResource(Resource):
    def __init__(self, client: httpx.Client):
        super().__init__(client)

    def get_merchant(
        self,
        merchant_code: str,
        params: typing.Optional[GetMerchantParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Merchant:
        """
        Retrieve a Merchant

        Retrieve a merchant.

        Merchant documentation: https://developer.sumup.com/tools/models/merchant
        """
        resp = self._client.get(
            f"/v1/merchants/{merchant_code}",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Merchant).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError(
                "No user with the specified ID exists.", status=resp.status_code, body=resp.text
            )
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def list_persons(
        self,
        merchant_code: str,
        params: typing.Optional[ListPersonsParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListPersonsResponseBody:
        """
        List Persons

        Returns a list of persons related to the merchant.

        Persons documentation: https://developer.sumup.com/tools/models/merchant#persons
        """
        resp = self._client.get(
            f"/v1/merchants/{merchant_code}/persons",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListPersonsResponseBody).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError(
                "No user with the specified ID exists.", status=resp.status_code, body=resp.text
            )
        elif resp.status_code == 500:
            raise APIError(
                "An internal server error occurred.", status=resp.status_code, body=resp.text
            )
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def get_person(
        self,
        merchant_code: str,
        person_id: str,
        params: typing.Optional[GetPersonParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Person:
        """
        Retrieve a Person

        Returns a single person related to the merchant.

        Persons documentation: https://developer.sumup.com/tools/models/merchant#persons
        """
        resp = self._client.get(
            f"/v1/merchants/{merchant_code}/persons/{person_id}",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Person).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError(
                "No user with the specified ID exists.", status=resp.status_code, body=resp.text
            )
        elif resp.status_code == 500:
            raise APIError(
                "An internal server error occurred.", status=resp.status_code, body=resp.text
            )
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)


class AsyncMerchantsResource(AsyncResource):
    def __init__(self, client: httpx.AsyncClient):
        super().__init__(client)

    async def get_merchant(
        self,
        merchant_code: str,
        params: typing.Optional[GetMerchantParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Merchant:
        """
        Retrieve a Merchant

        Retrieve a merchant.

        Merchant documentation: https://developer.sumup.com/tools/models/merchant
        """
        resp = await self._client.get(
            f"/v1/merchants/{merchant_code}",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Merchant).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError(
                "No user with the specified ID exists.", status=resp.status_code, body=resp.text
            )
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def list_persons(
        self,
        merchant_code: str,
        params: typing.Optional[ListPersonsParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListPersonsResponseBody:
        """
        List Persons

        Returns a list of persons related to the merchant.

        Persons documentation: https://developer.sumup.com/tools/models/merchant#persons
        """
        resp = await self._client.get(
            f"/v1/merchants/{merchant_code}/persons",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListPersonsResponseBody).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError(
                "No user with the specified ID exists.", status=resp.status_code, body=resp.text
            )
        elif resp.status_code == 500:
            raise APIError(
                "An internal server error occurred.", status=resp.status_code, body=resp.text
            )
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def get_person(
        self,
        merchant_code: str,
        person_id: str,
        params: typing.Optional[GetPersonParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Person:
        """
        Retrieve a Person

        Returns a single person related to the merchant.

        Persons documentation: https://developer.sumup.com/tools/models/merchant#persons
        """
        resp = await self._client.get(
            f"/v1/merchants/{merchant_code}/persons/{person_id}",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Person).validate_python(resp.json())
        elif resp.status_code == 404:
            raise APIError(
                "No user with the specified ID exists.", status=resp.status_code, body=resp.text
            )
        elif resp.status_code == 500:
            raise APIError(
                "An internal server error occurred.", status=resp.status_code, body=resp.text
            )
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)
