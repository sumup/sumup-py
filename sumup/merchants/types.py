# Code generated by `py-sdk-gen`. DO NOT EDIT.
import datetime
import typing
import pydantic

LegalType = str
"""
The unique legal type reference as defined in the country SDK. We do not rely on IDs as used by other services.Consumers of this API are expected to use the country SDK to map to any other IDs, translation keys, ordescriptions.

Min length: 4
Max length: 64
The country SDK documentation for legal types.: https://developer.sumup.com/tools/models/merchant#legal-types
"""

CountryCode = str
"""
An [ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
country code. This definition users `oneOf` with a two-character string
type to allow for support of future countries in client code.
Min length: 2
Max length: 2
"""


class Address(pydantic.BaseModel):
    """
            An address somewhere in the world. The address fields used depend on the country conventions. For example, inGreat Britain, `city` is `post_town`. In the United States, the top-level administrative unit used in addressesis `state`, whereas in Chile it's `region`.
    Whether an address is valid or not depends on whether the locally required fields are present. Fields not supported ina country will be ignored.
    Address documentation: https://sumup.roadie.so/docs/default/Component/merchants/merchant/#addresses
    """

    country: CountryCode
    """
	An [ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	country code. This definition users `oneOf` with a two-character string
	type to allow for support of future countries in client code.
	Min length: 2
	Max length: 2
	"""

    autonomous_community: typing.Optional[str] = None
    """
	In Spain, an autonomous community is the first sub-national level of political and administrative division.
	Max length: 512
	"""

    city: typing.Optional[str] = None
    """
	The city of the address.
	Max length: 512
	"""

    commune: typing.Optional[str] = None
    """
	In many countries, terms cognate with "commune" are used, referring to the community living in the area andthe common interest. Used in countries such as Chile.
	Max length: 512
	"""

    county: typing.Optional[str] = None
    """
	A county is a geographic region of a country used for administrative or other purposes in some nations. Usedin countries such as Ireland, Romania, etc.
	Max length: 512
	"""

    department: typing.Optional[str] = None
    """
	A department (French: d√©partement, Spanish: departamento) is an administrative or political division inseveral countries. Used in countries such as Colombia.
	Max length: 512
	"""

    district: typing.Optional[str] = None
    """
	A district is a type of administrative division that in some countries is managed by the local government. Usedin countries such as Portugal.
	Max length: 512
	"""

    eircode: typing.Optional[str] = None
    """
	A postal address in Ireland.
	Max length: 512
	"""

    municipality: typing.Optional[str] = None
    """
	A municipality is usually a single administrative division having corporate status and powers of self-government orjurisdiction as granted by national and regional laws to which it is subordinate. Used in countries such asColombia.
	Max length: 512
	"""

    neighborhood: typing.Optional[str] = None
    """
	Locality level of the address. Used in countries such as Brazil or Chile.
	Max length: 512
	"""

    post_code: typing.Optional[str] = None
    """
	The postal code (aka. zip code) of the address.
	Max length: 32
	"""

    post_town: typing.Optional[str] = None
    """
	A post town is a required part of all postal addresses in the United Kingdom and Ireland, and a basic unitof the postal delivery system.
	Max length: 512
	"""

    province: typing.Optional[str] = None
    """
	The province where the address is located. This may not be relevant in some countries.
	Max length: 512
	"""

    region: typing.Optional[str] = None
    """
	The region where the address is located. This may not be relevant in some countries.
	Max length: 512
	"""

    state: typing.Optional[str] = None
    """
	Most often, a country has a single state, with various administrative divisions. The term "state" is sometimesused to refer to the federated polities that make up the federation. Used in countries such as the United Statesand Brazil.
	Max length: 512
	"""

    street_address: typing.Optional[list[str]] = None
    """
	Max items: 2
	"""

    zip_code: typing.Optional[str] = None
    """
	A US system of postal codes used by the United States Postal Service (USPS).
	Max length: 512
	"""


class CompanyIdentifier(pydantic.BaseModel):
    """
            CompanyIdentifier is a schema definition.
    Company identifier documentation: https://developer.sumup.com/tools/models/merchant#company-identifiers
    """

    ref: str
    """
	The unique reference for the company identifier type as defined in the country SDK.
	"""

    value: str
    """
	The company identifier value.
	Max length: 100
	"""


CompanyIdentifiers = list[CompanyIdentifier]
"""
A list of country-specific company identifiers.
"""

PhoneNumber = str
"""
A publicly available phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.

Max length: 64
"""

Attributes = dict[typing.Any, typing.Any]
"""
Object attributes that are modifiable only by SumUp applications.
"""


class Company(pydantic.BaseModel):
    """
            Information about the company or business. This is legal information that is used for verification.

    Company documentation: https://developer.sumup.com/tools/models/merchant#company
    """

    address: typing.Optional[Address] = None
    """
	An address somewhere in the world. The address fields used depend on the country conventions. For example, inGreat Britain, `city` is `post_town`. In the United States, the top-level administrative unit used in addressesis `state`, whereas in Chile it's `region`.
	Whether an address is valid or not depends on whether the locally required fields are present. Fields not supported ina country will be ignored.
	Address documentation: https://sumup.roadie.so/docs/default/Component/merchants/merchant/#addresses
	"""

    attributes: typing.Optional[Attributes] = None
    """
	Object attributes that are modifiable only by SumUp applications.
	"""

    identifiers: typing.Optional[CompanyIdentifiers] = None
    """
	A list of country-specific company identifiers.
	"""

    legal_type: typing.Optional[LegalType] = None
    """
	The unique legal type reference as defined in the country SDK. We do not rely on IDs as used by other services.Consumers of this API are expected to use the country SDK to map to any other IDs, translation keys, ordescriptions.
	Min length: 4
	Max length: 64
	The country SDK documentation for legal types.: https://developer.sumup.com/tools/models/merchant#legal-types
	"""

    merchant_category_code: typing.Optional[str] = None
    """
	The merchant category code for the account as specified by [ISO18245](https://www.iso.org/standard/33365.html). MCCsare used to classify businesses based on the goods or services they provide.
	Pattern: ^[0-9]{4}$
	"""

    name: typing.Optional[str] = None
    """
	The company's legal name.
	Max length: 512
	"""

    phone_number: typing.Optional[PhoneNumber] = None
    """
	A publicly available phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
	Max length: 64
	"""

    trading_address: typing.Optional[Address] = None
    """
	An address somewhere in the world. The address fields used depend on the country conventions. For example, inGreat Britain, `city` is `post_town`. In the United States, the top-level administrative unit used in addressesis `state`, whereas in Chile it's `region`.
	Whether an address is valid or not depends on whether the locally required fields are present. Fields not supported ina country will be ignored.
	Address documentation: https://sumup.roadie.so/docs/default/Component/merchants/merchant/#addresses
	"""

    website: typing.Optional[str] = None
    """
	HTTP(S) URL of the company's website.
	Max length: 255
	"""


class Branding(pydantic.BaseModel):
    """
    Settings used to apply the Merchant's branding to email receipts, invoices, checkouts, and other products.
    """

    background_color: typing.Optional[str] = None
    """
	A hex color value representing the preferred background color of this merchant.
	"""

    hero: typing.Optional[str] = None
    """
	Data-URL encoded hero image for the merchant business.
	Format: uri
	"""

    icon: typing.Optional[str] = None
    """
	An icon for the merchant. Must be square.
	Format: uri
	"""

    logo: typing.Optional[str] = None
    """
	A logo for the merchant that will be used in place of the icon and without the merchant's name next to itif there's sufficient space.
	Format: uri
	"""

    primary_color: typing.Optional[str] = None
    """
	A hex color value representing the primary branding color of this merchant (your brand color).
	"""

    primary_color_fg: typing.Optional[str] = None
    """
	A hex color value representing the color of the text displayed on branding color of this merchant.
	"""

    secondary_color: typing.Optional[str] = None
    """
	A hex color value representing the secondary branding color of this merchant (accent color used for buttons).
	"""

    secondary_color_fg: typing.Optional[str] = None
    """
	A hex color value representing the color of the text displayed on secondary branding color of this merchant.
	"""


class BusinessProfile(pydantic.BaseModel):
    """
    Business information about the merchant. This information will be visible to the merchant's customers.
    """

    address: typing.Optional[Address] = None
    """
	An address somewhere in the world. The address fields used depend on the country conventions. For example, inGreat Britain, `city` is `post_town`. In the United States, the top-level administrative unit used in addressesis `state`, whereas in Chile it's `region`.
	Whether an address is valid or not depends on whether the locally required fields are present. Fields not supported ina country will be ignored.
	Address documentation: https://sumup.roadie.so/docs/default/Component/merchants/merchant/#addresses
	"""

    branding: typing.Optional[Branding] = None
    """
	Settings used to apply the Merchant's branding to email receipts, invoices, checkouts, and other products.
	"""

    dynamic_descriptor: typing.Optional[str] = None
    """
	The descriptor is the text that your customer sees on their bank account statement.
	The more recognisable your descriptor is, the less risk you have of receiving disputes (e.g. chargebacks).
	Max length: 30
	Pattern: ^[a-zA-Z0-9 \-+\'_.]{0,30}$
	"""

    email: typing.Optional[str] = None
    """
	A publicly available email address.
	Max length: 256
	"""

    name: typing.Optional[str] = None
    """
	The customer-facing business name.
	Max length: 512
	"""

    phone_number: typing.Optional[PhoneNumber] = None
    """
	A publicly available phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
	Max length: 64
	"""

    website: typing.Optional[str] = None
    """
	The business's publicly available website.
	Max length: 512
	"""


Meta = dict[typing.Any, typing.Any]
"""
A set of key-value pairs that you can attach to an object. This can be useful for storing additional informationabout the object in a structured format.
**Warning**: Updating Meta will overwrite the existing data. Make sure to always include the complete JSON object.
"""


class ClassicMerchantIdentifiers(pydantic.BaseModel):
    """
    ClassicMerchantIdentifiers is a schema definition.
    """

    id: int
    """
	Classic (serial) merchant ID.
	Format: int64
	Deprecated: this operation is deprecated
	"""


Version = str
"""
The version of the resource. The version reflects a specific change submitted to the API via one of the `PATCH`endpoints.
"""

ChangeStatus = str
"""
Reflects the status of changes submitted through the `PATCH` endpoints for the merchant or persons. If somechanges have not been applied yet, the status will be `pending`. If all changes have been applied, the status`done`.
The status is only returned after write operations or on read endpoints when the `version` query parameter isprovided.

Read only
"""


class Timestamps(pydantic.BaseModel):
    """
    Timestamps is a schema definition.
    """

    created_at: datetime.datetime
    """
	The date and time when the resource was created. This is a string as defined in [RFC 3339, section 5.6](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
	Read only
	"""

    updated_at: datetime.datetime
    """
	The date and time when the resource was last updated. This is a string as defined in [RFC 3339, section 5.6](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
	Readonly
	"""


class Merchant(pydantic.BaseModel):
    """
            Merchant is a schema definition.
    Merchant documentation: https://developer.sumup.com/tools/models/merchant
    """

    country: CountryCode
    """
	An [ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	country code. This definition users `oneOf` with a two-character string
	type to allow for support of future countries in client code.
	Min length: 2
	Max length: 2
	"""

    created_at: datetime.datetime
    """
	The date and time when the resource was created. This is a string as defined in [RFC 3339, section 5.6](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
	Read only
	"""

    default_currency: str
    """
	Three-letter [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217) representing the default currency forthe account.
	Read only
	Min length: 3
	Max length: 3
	"""

    default_locale: str
    """
	Merchant's default locale, represented as a BCP47 [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646) languagetag. This is typically an ISO 639-1 Alpha-2 [ISO639‚Äë1](https://www.iso.org/iso-639-language-code) language codein lowercase and an ISO 3166-1 Alpha-2 [ISO3166‚Äë1](https://www.iso.org/iso-3166-country-codes.html) countrycode in uppercase, separated by a dash. For example, en-US or fr-CA.
	In multilingual countries this is the merchant's preferred locale out of those, that are officially spoken inthe country. In a countries with a single official language this will match the official language.
	Min length: 2
	Max length: 5
	"""

    merchant_code: str
    """
	Short unique identifier for the merchant.
	Read only
	"""

    updated_at: datetime.datetime
    """
	The date and time when the resource was last updated. This is a string as defined in [RFC 3339, section 5.6](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6).
	Readonly
	"""

    alias: typing.Optional[str] = None
    """
	A user-facing name of the merchant account for use in dashboards and other user-facing applications. Forcustomer-facing business name see `merchant.business_profile`.
	"""

    avatar: typing.Optional[str] = None
    """
	A user-facing small-format logo for use in dashboards and other user-facing applications. For customer-facing brandingsee `merchant.business_profile.branding`.
	Format: url
	"""

    business_profile: typing.Optional[BusinessProfile] = None
    """
	Business information about the merchant. This information will be visible to the merchant's customers.
	"""

    business_type: typing.Optional[str] = None
    """
	The business type.
	* `sole_trader`: The business is run by an self-employed individual.
	* `company`: The business is run as a company with one or more shareholders
	* `partnership`: The business is run as a company with two or more shareholders that can be also other legalentities
	* `non_profit`: The business is run as a nonprofit organization that operates for public or social benefit
	* `government_entity`: The business is state owned and operated
	"""

    change_status: typing.Optional[ChangeStatus] = None
    """
	Reflects the status of changes submitted through the `PATCH` endpoints for the merchant or persons. If somechanges have not been applied yet, the status will be `pending`. If all changes have been applied, the status`done`.
	The status is only returned after write operations or on read endpoints when the `version` query parameter isprovided.
	Read only
	"""

    classic: typing.Optional[ClassicMerchantIdentifiers] = None

    company: typing.Optional[Company] = None
    """
	Information about the company or business. This is legal information that is used for verification.
	Company documentation: https://developer.sumup.com/tools/models/merchant#company
	"""

    meta: typing.Optional[Meta] = None
    """
	A set of key-value pairs that you can attach to an object. This can be useful for storing additional informationabout the object in a structured format.
	**Warning**: Updating Meta will overwrite the existing data. Make sure to always include the complete JSON object.
	"""

    organization_id: typing.Optional[str] = None
    """
	ID of the organization the merchant belongs to (if any).
	"""

    sandbox: typing.Optional[bool] = None
    """
	True if the merchant is a sandbox for testing.
	"""

    version: typing.Optional[Version] = None
    """
	The version of the resource. The version reflects a specific change submitted to the API via one of the `PATCH`endpoints.
	"""


class BaseError(pydantic.BaseModel):
    """
    BaseError is a schema definition.
    """

    instance: typing.Optional[str] = None
    """
	A unique identifier for the error instance. This can be used to trace the error back to the server logs.
	"""

    message: typing.Optional[str] = None
    """
	A human-readable message describing the error that occurred.
	"""


ErrorCategoryClient = typing.Literal["client_error"]

ErrorCodeNotFound = typing.Literal["not_found"]


class Ownership(pydantic.BaseModel):
    """
    Ownership is a schema definition.
    """

    share: int
    """
	The percent of ownership shares held by the person expressed in percent mille (1/100000). Only persons withthe relationship `owner` can have ownership.
	Format: int32
	Min: 25000
	Max: 100000
	"""


class PersonalIdentifier(pydantic.BaseModel):
    """
    PersonalIdentifier is a schema definition.
    """

    ref: str
    """
	The unique reference for the personal identifier type.
	"""

    value: str
    """
	The company identifier value.
	"""


class BasePerson(pydantic.BaseModel):
    """
            Base schema for a person associated with a merchant. This can be a legal representative, business owner (ultimatebeneficial owner), or an officer. A legal representative is the person who registered the merchant with SumUp.They should always have a `user_id`.

    Person documentation: https://developer.sumup.com/tools/models/merchant#persons
    """

    id: str
    """
	The unique identifier for the person. This is a [typeid](https://github.com/sumup/typeid).
	Read only
	"""

    address: typing.Optional[Address] = None
    """
	An address somewhere in the world. The address fields used depend on the country conventions. For example, inGreat Britain, `city` is `post_town`. In the United States, the top-level administrative unit used in addressesis `state`, whereas in Chile it's `region`.
	Whether an address is valid or not depends on whether the locally required fields are present. Fields not supported ina country will be ignored.
	Address documentation: https://sumup.roadie.so/docs/default/Component/merchants/merchant/#addresses
	"""

    birthdate: typing.Optional[datetime.date] = None
    """
	The date of birth of the individual, represented as an ISO 8601:2004 [ISO8601‚Äë2004] YYYY-MM-DD format.
	Format: date
	"""

    change_status: typing.Optional[ChangeStatus] = None
    """
	Reflects the status of changes submitted through the `PATCH` endpoints for the merchant or persons. If somechanges have not been applied yet, the status will be `pending`. If all changes have been applied, the status`done`.
	The status is only returned after write operations or on read endpoints when the `version` query parameter isprovided.
	Read only
	"""

    citizenship: typing.Optional[CountryCode] = None
    """
	An [ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	country code. This definition users `oneOf` with a two-character string
	type to allow for support of future countries in client code.
	Min length: 2
	Max length: 2
	"""

    family_name: typing.Optional[str] = None
    """
	The last name(s) of the individual.
	Max length: 60
	"""

    given_name: typing.Optional[str] = None
    """
	The first name(s) of the individual.
	Max length: 60
	"""

    identifiers: typing.Optional[list[PersonalIdentifier]] = None
    """
	A list of country-specific personal identifiers.
	Max items: 5
	"""

    middle_name: typing.Optional[str] = None
    """
	Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all canbe present, with the names being separated by space characters. Also note that in some cultures, middle namesare not used.
	Max length: 60
	"""

    ownership: typing.Optional[Ownership] = None

    phone_number: typing.Optional[PhoneNumber] = None
    """
	A publicly available phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
	Max length: 64
	"""

    relationships: typing.Optional[list[str]] = None
    """
	A list of roles the person has in the merchant or towards SumUp. A merchant must have at least one person withthe relationship `representative`.
	Min items: 1
	Max items: 1
	"""

    user_id: typing.Optional[str] = None
    """
	A corresponding identity user ID for the person, if they have a user account.
	"""

    version: typing.Optional[Version] = None
    """
	The version of the resource. The version reflects a specific change submitted to the API via one of the `PATCH`endpoints.
	"""


class Person(pydantic.BaseModel):
    """
    Person is a schema definition.
    """

    id: str
    """
	The unique identifier for the person. This is a [typeid](https://github.com/sumup/typeid).
	Read only
	"""

    address: typing.Optional[Address] = None
    """
	An address somewhere in the world. The address fields used depend on the country conventions. For example, inGreat Britain, `city` is `post_town`. In the United States, the top-level administrative unit used in addressesis `state`, whereas in Chile it's `region`.
	Whether an address is valid or not depends on whether the locally required fields are present. Fields not supported ina country will be ignored.
	Address documentation: https://sumup.roadie.so/docs/default/Component/merchants/merchant/#addresses
	"""

    birthdate: typing.Optional[datetime.date] = None
    """
	The date of birth of the individual, represented as an ISO 8601:2004 [ISO8601‚Äë2004] YYYY-MM-DD format.
	Format: date
	"""

    change_status: typing.Optional[ChangeStatus] = None
    """
	Reflects the status of changes submitted through the `PATCH` endpoints for the merchant or persons. If somechanges have not been applied yet, the status will be `pending`. If all changes have been applied, the status`done`.
	The status is only returned after write operations or on read endpoints when the `version` query parameter isprovided.
	Read only
	"""

    citizenship: typing.Optional[CountryCode] = None
    """
	An [ISO3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
	country code. This definition users `oneOf` with a two-character string
	type to allow for support of future countries in client code.
	Min length: 2
	Max length: 2
	"""

    family_name: typing.Optional[str] = None
    """
	The last name(s) of the individual.
	Max length: 60
	"""

    given_name: typing.Optional[str] = None
    """
	The first name(s) of the individual.
	Max length: 60
	"""

    identifiers: typing.Optional[list[PersonalIdentifier]] = None
    """
	A list of country-specific personal identifiers.
	Max items: 5
	"""

    middle_name: typing.Optional[str] = None
    """
	Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all canbe present, with the names being separated by space characters. Also note that in some cultures, middle namesare not used.
	Max length: 60
	"""

    ownership: typing.Optional[Ownership] = None

    phone_number: typing.Optional[PhoneNumber] = None
    """
	A publicly available phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.
	Max length: 64
	"""

    relationships: typing.Optional[list[str]] = None
    """
	A list of roles the person has in the merchant or towards SumUp. A merchant must have at least one person withthe relationship `representative`.
	Min items: 1
	Max items: 1
	"""

    user_id: typing.Optional[str] = None
    """
	A corresponding identity user ID for the person, if they have a user account.
	"""

    version: typing.Optional[Version] = None
    """
	The version of the resource. The version reflects a specific change submitted to the API via one of the `PATCH`endpoints.
	"""


class ListPersonsResponseBody(pydantic.BaseModel):
    """
    ListPersonsResponseBody is a schema definition.
    """

    items: list[Person]


ErrorCategoryServer = typing.Literal["server_error"]

ErrorCodeInternalServerError = typing.Literal["internal_error"]
