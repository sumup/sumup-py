# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .._exceptions import APIError
from .types import (
    Customer,
    PaymentInstrumentResponse,
    PersonalDetails,
)
import httpx
import typing
import pydantic


class CreateCustomerBody(pydantic.BaseModel):
    """
    CreateCustomerBody is a schema definition.
    """

    customer_id: str
    """
	Unique ID of the customer.
	"""

    personal_details: typing.Optional[PersonalDetails] = None
    """
	Personal details for the customer.
	"""


class UpdateCustomerBody(pydantic.BaseModel):
    """
    UpdateCustomerBody is a schema definition.
    """

    personal_details: typing.Optional[PersonalDetails] = None
    """
	Personal details for the customer.
	"""


ListPaymentInstruments200Response = list[PaymentInstrumentResponse]
"""
ListPaymentInstruments200Response is a schema definition.
"""


class CustomersResource(Resource):
    def __init__(self, client: httpx.Client):
        super().__init__(client)

    def create(
        self, body: CreateCustomerBody, headers: typing.Optional[HeaderTypes] = None
    ) -> Customer:
        """
        Create a customer

        Creates a new saved customer resource which you can later manipulate and save payment instruments to.
        """
        resp = self._client.post(
            "/v0.1/customers",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 201:
            return pydantic.TypeAdapter(Customer).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        elif resp.status_code == 409:
            raise APIError("Conflict", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def get(self, customer_id: str, headers: typing.Optional[HeaderTypes] = None) -> Customer:
        """
        Retrieve a customer

        Retrieves an identified saved customer resource through the unique `customer_id` parameter, generated upon customer creation.
        """
        resp = self._client.get(
            f"/v0.1/customers/{customer_id}",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Customer).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Not Found", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def update(
        self,
        customer_id: str,
        body: UpdateCustomerBody,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Customer:
        """
        Update a customer

        Updates an identified saved customer resource's personal details.

        The request only overwrites the parameters included in the request, all other parameters will remain with theirinitially assigned values.
        """
        resp = self._client.put(
            f"/v0.1/customers/{customer_id}",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Customer).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Not Found", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def list_payment_instruments(
        self, customer_id: str, headers: typing.Optional[HeaderTypes] = None
    ) -> ListPaymentInstruments200Response:
        """
        List payment instruments

        Lists all payment instrument resources that are saved for an identified customer.
        """
        resp = self._client.get(
            f"/v0.1/customers/{customer_id}/payment-instruments",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListPaymentInstruments200Response).validate_python(
                resp.json()
            )
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Not Found", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    def deactivate_payment_instrument(
        self, customer_id: str, token: str, headers: typing.Optional[HeaderTypes] = None
    ):
        """
        Deactivate a payment instrument

        Deactivates an identified card payment instrument resource for a customer.
        """
        resp = self._client.delete(
            f"/v0.1/customers/{customer_id}/payment-instruments/{token}",
            headers=headers,
        )
        if resp.status_code == 204:
            return
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Not Found", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)


class AsyncCustomersResource(AsyncResource):
    def __init__(self, client: httpx.AsyncClient):
        super().__init__(client)

    async def create(
        self, body: CreateCustomerBody, headers: typing.Optional[HeaderTypes] = None
    ) -> Customer:
        """
        Create a customer

        Creates a new saved customer resource which you can later manipulate and save payment instruments to.
        """
        resp = await self._client.post(
            "/v0.1/customers",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 201:
            return pydantic.TypeAdapter(Customer).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        elif resp.status_code == 409:
            raise APIError("Conflict", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def get(self, customer_id: str, headers: typing.Optional[HeaderTypes] = None) -> Customer:
        """
        Retrieve a customer

        Retrieves an identified saved customer resource through the unique `customer_id` parameter, generated upon customer creation.
        """
        resp = await self._client.get(
            f"/v0.1/customers/{customer_id}",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Customer).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Not Found", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def update(
        self,
        customer_id: str,
        body: UpdateCustomerBody,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> Customer:
        """
        Update a customer

        Updates an identified saved customer resource's personal details.

        The request only overwrites the parameters included in the request, all other parameters will remain with theirinitially assigned values.
        """
        resp = await self._client.put(
            f"/v0.1/customers/{customer_id}",
            json=body.model_dump(),
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(Customer).validate_python(resp.json())
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Not Found", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def list_payment_instruments(
        self, customer_id: str, headers: typing.Optional[HeaderTypes] = None
    ) -> ListPaymentInstruments200Response:
        """
        List payment instruments

        Lists all payment instrument resources that are saved for an identified customer.
        """
        resp = await self._client.get(
            f"/v0.1/customers/{customer_id}/payment-instruments",
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListPaymentInstruments200Response).validate_python(
                resp.json()
            )
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Not Found", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)

    async def deactivate_payment_instrument(
        self, customer_id: str, token: str, headers: typing.Optional[HeaderTypes] = None
    ):
        """
        Deactivate a payment instrument

        Deactivates an identified card payment instrument resource for a customer.
        """
        resp = await self._client.delete(
            f"/v0.1/customers/{customer_id}/payment-instruments/{token}",
            headers=headers,
        )
        if resp.status_code == 204:
            return
        elif resp.status_code == 401:
            raise APIError("Unauthorized", status=resp.status_code, body=resp.text)
        elif resp.status_code == 403:
            raise APIError("Forbidden", status=resp.status_code, body=resp.text)
        elif resp.status_code == 404:
            raise APIError("Not Found", status=resp.status_code, body=resp.text)
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)
