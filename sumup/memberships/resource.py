# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .._exceptions import APIError
from .types import (
    Membership,
    ResourceType,
)
import httpx
import typing
import pydantic


class ListMembershipsParams(pydantic.BaseModel):
    """
    ListMembershipsParams: query parameters for ListMemberships
    """

    kind: typing.Optional[ResourceType] = None
    """
	The kind of the membership resource.
	Possible values are:
	* `merchant` - merchant account(s)
	* `organization` - organization(s)
	"""

    limit: typing.Optional[int] = None

    offset: typing.Optional[int] = None

    resource_attributes_sandbox: typing.Optional[bool] = None

    resource_name: typing.Optional[str] = None


class ListMemberships200Response(pydantic.BaseModel):
    """
    ListMemberships200Response is a schema definition.
    """

    items: list[Membership]

    total_count: int


class MembershipsResource(Resource):
    def __init__(self, client: httpx.Client):
        super().__init__(client)

    def list(
        self,
        params: typing.Optional[ListMembershipsParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListMemberships200Response:
        """
        List memberships

        List memberships of the current user.
        """
        resp = self._client.get(
            "/v0.1/memberships",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListMemberships200Response).validate_python(resp.json())
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)


class AsyncMembershipsResource(AsyncResource):
    def __init__(self, client: httpx.AsyncClient):
        super().__init__(client)

    async def list(
        self,
        params: typing.Optional[ListMembershipsParams] = None,
        headers: typing.Optional[HeaderTypes] = None,
    ) -> ListMemberships200Response:
        """
        List memberships

        List memberships of the current user.
        """
        resp = await self._client.get(
            "/v0.1/memberships",
            params=params.model_dump() if params else None,
            headers=headers,
        )
        if resp.status_code == 200:
            return pydantic.TypeAdapter(ListMemberships200Response).validate_python(resp.json())
        else:
            raise APIError("Unexpected response", status=resp.status_code, body=resp.text)
