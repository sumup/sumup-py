# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .types import Membership
import typing
import pydantic


class ListMembershipsParams(pydantic.BaseModel):
    """
    ListMembershipsParams: query parameters for ListMemberships
    """

    kind: typing.Optional[str] = None
    """
	The kind of the membership resource.
	Possible values are:
	* `merchant` - merchant account(s)
	"""

    limit: typing.Optional[int] = None

    offset: typing.Optional[int] = None

    resource_attributes_sandbox: typing.Optional[bool] = None


class ListMemberships200Response(pydantic.BaseModel):
    """
    ListMemberships200Response is a schema definition.
    """

    items: list[Membership]

    total_count: int


class MembershipsResource(Resource):
    def __init__(self, client):
        super().__init__(client)

    def list(
        self, params: ListMembershipsParams | None = None, headers: HeaderTypes | None = None
    ) -> ListMemberships200Response:
        """
        List memberships

        List memberships of the current user.
        """
        resp = self._client.get(
            "/v0.1/memberships",
            params=params.dict() if params else None,
            headers=headers,
        )
        return pydantic.TypeAdapter(ListMemberships200Response).validate_python(resp.json())


class AsyncMembershipsResource(AsyncResource):
    def __init__(self, client):
        super().__init__(client)

    async def list(
        self, params: ListMembershipsParams | None = None, headers: HeaderTypes | None = None
    ) -> ListMemberships200Response:
        """
        List memberships

        List memberships of the current user.
        """
        resp = await self._client.get(
            "/v0.1/memberships",
            params=params.dict() if params else None,
            headers=headers,
        )
        return pydantic.TypeAdapter(ListMemberships200Response).validate_python(resp.json())
