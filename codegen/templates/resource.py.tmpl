# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Resource, AsyncResource, HeaderTypes
from .._exceptions import APIError
{{- with .TypeNames }}
from .types import {{ join ", " . }}
{{- end }}
from datetime import datetime, time, date
import typing
import pydantic
import typing_extensions


{{- range $type := .Params }}
{{ $type.String }}
{{- end }}


class {{.Service}}Resource(Resource):
	def __init__(self, client):
		super().__init__(client)

{{ range $method := .Methods }}
{{- with .DeprecationNotice }}
	@typing_extensions.deprecated("{{ . }}")
{{- end }}
	def {{.FunctionName}}({{.ParamsString}}, headers: typing.Optional[HeaderTypes] = None){{ with .ResponseType }} -> {{ . }}{{ end }}:
{{- with .Description}}
		'''
{{ indent 2 . }}
		'''
{{- end }}
		resp = self._client.{{.Method}}({{.Path}},
{{- if .HasBody }}
			json=body.model_dump(),
{{- end }}
{{- with .QueryParams }}
			params=params.dict() if params else None,
{{- end }}
			headers=headers,
		)
{{- range $i, $res := .Responses }}
	{{- if eq $i 0 }}
		if resp.status_code == {{ .Code }}:
		{{- if .IsErr }}
			raise APIError(f"Unexpected response status code {resp.status_code}", body=resp.text)
		{{- else }}
			return pydantic.TypeAdapter({{ .Type }}).validate_python(resp.json())
		{{- end }}
	{{- else }}
		elif resp.status_code == {{ .Code }}:
		{{- if .IsErr }}
			raise APIError(f"{{ .ErrDescription }}", status=resp.status_code, body=resp.text)
		{{- else }}
			return pydantic.TypeAdapter({{ .Type }}).validate_python(resp.json())
		{{- end }}
	{{- end }}
{{- end }}
		else:
	        raise APIError(f"Unexpected response status code {resp.status_code}", body=resp.text)
{{end}}

class Async{{.Service}}Resource(AsyncResource):
	def __init__(self, client):
		super().__init__(client)

{{ range $method := .Methods }}
{{- with .DeprecationNotice }}
	@typing_extensions.deprecated("{{ . }}")
{{- end }}
	async def {{.FunctionName}}({{.ParamsString}}, headers: typing.Optional[HeaderTypes] = None){{ with .ResponseType }} -> {{ . }}{{ end }}:
{{- with .Description}}
		'''
{{ indent 2 . }}
		'''
{{- end }}
		resp = await self._client.{{.Method}}({{.Path}},
{{- if .HasBody }}
			json=body.model_dump(),
{{- end }}
{{- with .QueryParams }}
			params=params.dict() if params else None,
{{- end }}
			headers=headers,
		)
{{- range $i, $res := .Responses }}
	{{- if eq $i 0 }}
		if resp.status_code == {{ .Code }}:
		{{- if .IsErr }}
			raise APIError(f"Unexpected response status code {resp.status_code}", body=resp.text)
		{{- else }}
			return pydantic.TypeAdapter({{ .Type }}).validate_python(resp.json())
		{{- end }}
	{{- else }}
		elif resp.status_code == {{ .Code }}:
		{{- if .IsErr }}
			raise APIError(f"{{ .ErrDescription }}", status=resp.status_code, body=resp.text)
		{{- else }}
			return pydantic.TypeAdapter({{ .Type }}).validate_python(resp.json())
		{{- end }}
	{{- end }}
{{- end }}
		else:
	        raise APIError(f"Unexpected response status code {resp.status_code}", body=resp.text)
{{end}}
